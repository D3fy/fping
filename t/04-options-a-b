#!/usr/bin/perl -w

use strict;
use warnings;

use Test::More;
use Time::HiRes qw(gettimeofday tv_interval);
use t::common;

#  -a         show targets that are alive
#  -A         show targets by address
#  -b n       amount of ping data to send, in bytes (default 56)
#  -B f       set exponential backoff factor to f

subtest "fping -a" => sub {
	my $cmd = Test::Command->new(cmd => "$FPING -a 127.0.0.1 127.0.0.2");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1\n127.0.0.2\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -A" => sub {
	my $cmd = Test::Command->new(cmd => "$FPING -A localhost");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -b" => sub {
	my $cmd = Test::Command->new(cmd => "$FPING -b 1000 127.0.0.1");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -B" => sub {
	my $t0 = [gettimeofday];
	my $cmd = Test::Command->new(cmd => "$FPING  -t 100 -r 3 -B 2  8.8.8.7");
	$cmd->exit_is_num(1);
	$cmd->stdout_is_eq("8.8.8.7 is unreachable\n");
	$cmd->stderr_like(qr{^(|(8.8.8.7: error while sending ping: No route to host\n)+)$});
	my $elapsed = tv_interval($t0);
	# 0.1 + 0.2 + 0.4 + 0.8 = 1.5
	cmp_ok($elapsed, '>=', 1.5);
	cmp_ok($elapsed, '<', 1.8);
};

done_testing;

# vi:syntax=perl
