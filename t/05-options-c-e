#!/usr/bin/perl

use strict;
use warnings;

use Test::More;
use t::common;

#  -c n       count of pings to send to each target (default 1)
#  -C n       same as -c, report results in verbose format
#  -D         print timestamp before each output line
#  -e         show elapsed time on return packets

subtest "fping -c n" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -c 2 -p 100 localhost 127.0.0.1");
	$cmd->exit_is_num(0);
	$cmd->stdout_like(qr{localhost : \[0\], 84 bytes, 0\.\d+ ms \(0\.\d+ avg, 0% loss\)
127\.0\.0\.1 : \[0\], 84 bytes, 0\.\d+ ms \(0.\d+ avg, 0% loss\)
localhost : \[1\], 84 bytes, 0\.\d+ ms \(0\.\d+ avg, 0% loss\)
127\.0\.0\.1 : \[1\], 84 bytes, 0\.\d+ ms \(0\.\d+ avg, 0% loss\)
});

	$cmd->stderr_like(qr{localhost : xmt/rcv/%loss = 2/2/0%, min/avg/max = 0\.\d+/0\.\d+/0\.\d+
127\.0\.0\.1 : xmt/rcv/%loss = 2/2/0%, min/avg/max = 0\.\d+/0\.\d+/0\.\d+
});
};
subtest "fping -C n" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -C 2 -p 100 localhost 127.0.0.1");
	$cmd->exit_is_num(0);
	$cmd->stdout_like(qr{localhost : \[0\], 84 bytes, 0\.\d+ ms \(0\.\d+ avg, 0% loss\)
127\.0\.0\.1 : \[0\], 84 bytes, 0\.\d+ ms \(0.\d+ avg, 0% loss\)
localhost : \[1\], 84 bytes, 0\.\d+ ms \(0\.\d+ avg, 0% loss\)
127\.0\.0\.1 : \[1\], 84 bytes, 0\.\d+ ms \(0\.\d+ avg, 0% loss\)
});
	$cmd->stderr_like(qr{localhost : 0\.\d+ 0\.\d+\n127\.0\.0\.1 : 0\.\d+ 0\.\d+\n});
};
subtest "fping -D" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -D -c 2 -p 100 127.0.0.1");
	$cmd->exit_is_num(0);
	$cmd->stdout_like(qr{\[\d{10}\.\d+\] 127\.0\.0\.1 : \[0\], 84 bytes, 0\.\d+ ms \(0.\d+ avg, 0% loss\)\n\[\d{10}\.\d+\] 127\.0\.0\.1 : \[1\], 84 bytes, 0\.\d+ ms \(0\.\d+ avg, 0% loss\)\n});
	$cmd->stderr_like(qr{127\.0\.0\.1 : xmt/rcv/%loss = 2/2/0%, min/avg/max = 0\.\d+/0\.\d+/0\.\d+\n});
};

subtest "fping -e" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -e 127.0.0.1");
	$cmd->exit_is_num(0);
	$cmd->stdout_like(qr{127\.0\.0\.1 is alive \(0\.\d+ ms\)\n});
	$cmd->stderr_is_eq("");
};

done_testing;

# vi:syntax=perl
