#!/usr/bin/perl -w

use strict;
use warnings;

use Test::More;
use t::common;
use File::Temp;

#  -f file    read list of targets from a file ( - means stdin) (only if no -g specified)
#  -g         generate target list (only if no -f specified)
#               (specify the start and end IP in the target list, or supply a IP netmask)
#               (ex. ../src/fping -g 192.168.1.0 192.168.1.255 or ../src/fping -g 192.168.1.0/24)
#  -H n       Set the IP TTL value (Time To Live hops)

my $tmpfile = File::Temp->new();
print $tmpfile "127.0.0.1\n127.0.0.2\n";
close($tmpfile);

subtest "fping without option (-> equivalent to 'fping -f -')" => sub {
	my $cmd = t::Command->new(cmd => "cat ".$tmpfile->filename." | $FPING");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n127.0.0.2 is alive\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -f -" => sub {
	my $cmd = t::Command->new(cmd => "cat ".$tmpfile->filename." | $FPING -f -");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n127.0.0.2 is alive\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -f file" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -f ".$tmpfile->filename);
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n127.0.0.2 is alive\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -g (range)" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -g 127.0.0.1 127.0.0.5");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n127.0.0.2 is alive\n127.0.0.3 is alive\n127.0.0.4 is alive\n127.0.0.5 is alive\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -g (cidr)" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -g 127.0.0.1/30");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n127.0.0.2 is alive\n");
	$cmd->stderr_is_eq("");
};
subtest "fping -H" => sub {
	my $cmd = t::Command->new(cmd => "$FPING -H 1 127.0.0.1");
	$cmd->exit_is_num(0);
	$cmd->stdout_is_eq("127.0.0.1 is alive\n");
	$cmd->stderr_is_eq("");
};

done_testing;

# vi:syntax=perl
